`include "IDCT.v"

module testbench;
  reg            clock;
  reg            reset;
  reg [12*8-1:0] i_tdata;
  reg            i_tvalid;
  reg            i_tready;
  wire [9*8-1:0] o_tdata;
  wire           o_tvalid;
  wire           o_tready;

  reg [11:0] i [8*8];
  reg [8:0]  o [8*8];

  IDCT idct(
    clock,
    reset,
    i_tdata,
    i_tvalid,
    i_tready,
    o_tdata,
    o_tvalid,
    o_tready
  );

  task apply;
    integer k;
    begin
      for (k = 0; k < 8; k = k + 1) begin
        @(posedge clock);
        i_tvalid <= 1;
        i_tdata[12*0+11:12*0] <= i[8*k+0];
        i_tdata[12*1+11:12*1] <= i[8*k+1];
        i_tdata[12*2+11:12*2] <= i[8*k+2];
        i_tdata[12*3+11:12*3] <= i[8*k+3];
        i_tdata[12*4+11:12*4] <= i[8*k+4];
        i_tdata[12*5+11:12*5] <= i[8*k+5];
        i_tdata[12*6+11:12*6] <= i[8*k+6];
        i_tdata[12*7+11:12*7] <= i[8*k+7];
        wait (o_tready);
      end
      @(posedge clock);
      i_tvalid <= 0;
    end
  endtask

  task check;
    integer k;
    reg verdict;
    begin
      verdict <= 1;
      for (k = 0; k < 8; k = k + 1) begin
        @(posedge clock);
        if (o_tvalid)
          begin
            if (o_tdata[9*0+8:9*0] != o[8*k+0]) verdict = 0;
            if (o_tdata[9*1+8:9*1] != o[8*k+1]) verdict = 0;
            if (o_tdata[9*2+8:9*2] != o[8*k+2]) verdict = 0;
            if (o_tdata[9*3+8:9*3] != o[8*k+3]) verdict = 0;
            if (o_tdata[9*4+8:9*4] != o[8*k+4]) verdict = 0;
            if (o_tdata[9*5+8:9*5] != o[8*k+5]) verdict = 0;
            if (o_tdata[9*6+8:9*6] != o[8*k+6]) verdict = 0;
            if (o_tdata[9*7+8:9*7] != o[8*k+7]) verdict = 0;
          end
        else
          k = k - 1;
      end
      if (verdict)
        $display("Passed");
      else
        $display("Failed");
    end
  endtask

  task test(
    input [11:0]
      x00, x01, x02, x03, x04, x05, x06, x07,
      x10, x11, x12, x13, x14, x15, x16, x17,
      x20, x21, x22, x23, x24, x25, x26, x27,
      x30, x31, x32, x33, x34, x35, x36, x37,
      x40, x41, x42, x43, x44, x45, x46, x47,
      x50, x51, x52, x53, x54, x55, x56, x57,
      x60, x61, x62, x63, x64, x65, x66, x67,
      x70, x71, x72, x73, x74, x75, x76, x77,
    input [8:0]
      y00, y01, y02, y03, y04, y05, y06, y07,
      y10, y11, y12, y13, y14, y15, y16, y17,
      y20, y21, y22, y23, y24, y25, y26, y27,
      y30, y31, y32, y33, y34, y35, y36, y37,
      y40, y41, y42, y43, y44, y45, y46, y47,
      y50, y51, y52, y53, y54, y55, y56, y57,
      y60, y61, y62, y63, y64, y65, y66, y67,
      y70, y71, y72, y73, y74, y75, y76, y77);
    begin
      i[8*0+0] = x00; i[8*0+1] = x01; i[8*0+2] = x02; i[8*0+3] = x03; i[8*0+4] = x04; i[8*0+5] = x05; i[8*0+6] = x06; i[8*0+7] = x07;
      i[8*1+0] = x10; i[8*1+1] = x11; i[8*1+2] = x12; i[8*1+3] = x13; i[8*1+4] = x14; i[8*1+5] = x15; i[8*1+6] = x16; i[8*1+7] = x17;
      i[8*2+0] = x20; i[8*2+1] = x21; i[8*2+2] = x22; i[8*2+3] = x23; i[8*2+4] = x24; i[8*2+5] = x25; i[8*2+6] = x26; i[8*2+7] = x27;
      i[8*3+0] = x30; i[8*3+1] = x31; i[8*3+2] = x32; i[8*3+3] = x33; i[8*3+4] = x34; i[8*3+5] = x35; i[8*3+6] = x36; i[8*3+7] = x37;
      i[8*4+0] = x40; i[8*4+1] = x41; i[8*4+2] = x42; i[8*4+3] = x43; i[8*4+4] = x44; i[8*4+5] = x45; i[8*4+6] = x46; i[8*4+7] = x47;
      i[8*5+0] = x50; i[8*5+1] = x51; i[8*5+2] = x52; i[8*5+3] = x53; i[8*5+4] = x54; i[8*5+5] = x55; i[8*5+6] = x56; i[8*5+7] = x57;
      i[8*6+0] = x60; i[8*6+1] = x61; i[8*6+2] = x62; i[8*6+3] = x63; i[8*6+4] = x64; i[8*6+5] = x65; i[8*6+6] = x66; i[8*6+7] = x67;
      i[8*7+0] = x70; i[8*7+1] = x71; i[8*7+2] = x72; i[8*7+3] = x73; i[8*7+4] = x74; i[8*7+5] = x75; i[8*7+6] = x76; i[8*7+7] = x77;

      o[8*0+0] = y00; o[8*0+1] = y01; o[8*0+2] = y02; o[8*0+3] = y03; o[8*0+4] = y04; o[8*0+5] = y05; o[8*0+6] = y06; o[8*0+7] = y07;
      o[8*1+0] = y10; o[8*1+1] = y11; o[8*1+2] = y12; o[8*1+3] = y13; o[8*1+4] = y14; o[8*1+5] = y15; o[8*1+6] = y16; o[8*1+7] = y17;
      o[8*2+0] = y20; o[8*2+1] = y21; o[8*2+2] = y22; o[8*2+3] = y23; o[8*2+4] = y24; o[8*2+5] = y25; o[8*2+6] = y26; o[8*2+7] = y27;
      o[8*3+0] = y30; o[8*3+1] = y31; o[8*3+2] = y32; o[8*3+3] = y33; o[8*3+4] = y34; o[8*3+5] = y35; o[8*3+6] = y36; o[8*3+7] = y37;
      o[8*4+0] = y40; o[8*4+1] = y41; o[8*4+2] = y42; o[8*4+3] = y43; o[8*4+4] = y44; o[8*4+5] = y45; o[8*4+6] = y46; o[8*4+7] = y47;
      o[8*5+0] = y50; o[8*5+1] = y51; o[8*5+2] = y52; o[8*5+3] = y53; o[8*5+4] = y54; o[8*5+5] = y55; o[8*5+6] = y56; o[8*5+7] = y57;
      o[8*6+0] = y60; o[8*6+1] = y61; o[8*6+2] = y62; o[8*6+3] = y63; o[8*6+4] = y64; o[8*6+5] = y65; o[8*6+6] = y66; o[8*6+7] = y67;
      o[8*7+0] = y70; o[8*7+1] = y71; o[8*7+2] = y72; o[8*7+3] = y73; o[8*7+4] = y74; o[8*7+5] = y75; o[8*7+6] = y76; o[8*7+7] = y77;

      apply;
      check;
    end
  endtask

  always #5 clock <= ~clock;

  initial begin
    $dumpfile("testbench_IDCT.vcd");
    $dumpvars(5, testbench);

    clock <= 0;

    i_tready <= 1;

    reset <= 1;
    #10;
    reset <= 0;

    //--------------------------------------------------------------------------
    // Test 0
    //--------------------------------------------------------------------------
    test(   23,  -1,  -2,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,

             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3,
             2,   3,   3,   3,   3,   3,   3,   3);

    //--------------------------------------------------------------------------
    // Test 1
    //--------------------------------------------------------------------------
    test(   13,  -7,   0,   0,   0,   0,   0,   0,
             0,   2,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,

             1,   1,   1,   1,   2,   2,   2,   2,
             1,   1,   1,   1,   2,   2,   2,   2,
             1,   1,   1,   1,   2,   2,   2,   3,
             1,   1,   1,   1,   2,   2,   3,   3,
             0,   1,   1,   1,   2,   2,   3,   3,
             0,   0,   1,   1,   2,   2,   3,   3,
             0,   0,   1,   1,   2,   3,   3,   3,
             0,   0,   1,   1,   2,   3,   3,   3);

    //--------------------------------------------------------------------------
    // Test 2
    //--------------------------------------------------------------------------
    test( -166,  -7,  -4,  -4,   0,   0,   0,   0,
            -2,   0,   0,   0,   0,   0,   0,   0,
            -2,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,
             0,   0,   0,   0,   0,   0,   0,   0,

           -24, -23, -21, -21, -21, -21, -21, -20,
           -24, -22, -21, -20, -21, -21, -21, -20,
           -23, -22, -21, -20, -20, -21, -20, -20,
           -23, -22, -20, -20, -20, -20, -20, -19,
           -23, -22, -20, -20, -20, -20, -20, -19,
           -23, -22, -20, -20, -20, -20, -20, -19,
           -23, -22, -20, -20, -20, -20, -20, -19,
           -23, -22, -20, -20, -20, -20, -20, -20);

    //--------------------------------------------------------------------------
    // Test 3
    //--------------------------------------------------------------------------
    test( -240,   8, -11,  47,  26,  -6,   0,   5,
            28,  -6,  85,  44,  -4, -25,   5,  16,
            21,   8,  32, -16, -24,   0,  30,  12,
            -2,  18,   0,  -2,   0,   7,   0, -15,
             7,   4,  15, -24,   0,   9,   8,  -6,
             4,   9,   0,  -5,  -6,   0,   0,   0,
            -4,   0,  -6,   0,   0,  10, -10,  -8,
             6,   0,   0,   0,   0,   0,   0,  -8,

            21, -10, -26, -61, -43, -17, -22,  -8,
             5, -28, -47, -73, -11, -14, -24, -17,
           -14, -31, -61, -45,  -5, -18, -22, -34,
           -23, -36, -49, -32, -12, -33, -33, -35,
           -30, -39, -53,  -8, -19, -31, -43, -42,
           -41, -43, -50,  -4, -15, -33, -44, -66,
           -40, -38, -21, -14, -17, -26, -46, -52,
           -44, -47,  -9, -12, -30, -33, -38, -37);

    $finish();
  end

endmodule
