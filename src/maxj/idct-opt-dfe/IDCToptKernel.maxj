package idct;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class IDCToptKernel extends Kernel {

	private static final DFEType type_Short = dfeInt(16);
	private static final DFEType type_Int = dfeInt(32);
	private static final DFEVectorType<DFEVar> vectorType_Short = new DFEVectorType<DFEVar>(type_Short, 8);
	
	private static final int W1 = 2841; /* 2048*sqrt(2)*cos(1*pi/16) */
	private static final int W2 = 2676; /* 2048*sqrt(2)*cos(2*pi/16) */
	private static final int W3 = 2408; /* 2048*sqrt(2)*cos(3*pi/16) */
	private static final int W5 = 1609; /* 2048*sqrt(2)*cos(5*pi/16) */
	private static final int W6 = 1108; /* 2048*sqrt(2)*cos(6*pi/16) */
	private static final int W7 = 565;  /* 2048*sqrt(2)*cos(7*pi/16) */
	
	public static final int blockDim = 8;
	
	private static final List<Memory<DFEVector<DFEVar>>> mems = new ArrayList<>();
	
	public IDCToptKernel(final KernelParameters parameters) {
		super(parameters);
		
		for (int i = 0; i < blockDim; i++) {
			Memory<DFEVector<DFEVar>> memi = mem.alloc(vectorType_Short, 2);
			mems.add(i, memi);
		}
		
		debug.simPrintf("Starting DFE\n");
		
		DFEVector<DFEVar> result = vectorType_Short.newInstance(this);
		
		Count.Params rowCountPar = control.count.makeParams(5).withMax(16);
		Counter rowCount = control.count.makeCounter(rowCountPar);
		DFEVar readInput = rowCount.getCount() < 8;
		
		// Input
		final DFEVector<DFEVar> row = io.input("row_in", vectorType_Short);
		row.simWatch("input_row");
		
		
		debug.simPrintf("Row count: %d \n", rowCount.getCount());
		debug.simPrintf(~readInput, "Col count: %d \n", rowCount.getCount() - 8);
		
		result = readInput ? idctRow(row, rowCount.getCount(), readInput) : idctCol(readCol(rowCount.getCount() - 8));
		// Output
		io.output("block_out", result, vectorType_Short, ~readInput);
	}
	
	private DFEVector<DFEVar> idctRow(DFEVector<DFEVar> values, DFEVar row, DFEVar enable) {
		debug.simPrintf("Running idctRow \n");
		DFEVar x0, x1, x2, x3, x4, x5, x6, x7, x8;
		x1 = (values[4]).cast(type_Int) << 11;
		x2 = (values[6]).cast(type_Int);
		x3 = (values[2]).cast(type_Int);
		x4 = (values[1]).cast(type_Int);
		x5 = (values[7]).cast(type_Int);
		x6 = (values[5]).cast(type_Int);
		x7 = (values[3]).cast(type_Int);
		x0 = ((values[0]).cast(type_Int) << 11) + 128; /* for proper rounding in the fourth stage */

		/* first stage */
		x8 = W7 * (x4 + x5);
		x4 = x8 + (W1 - W7) * x4;
		x5 = x8 - (W1 + W7) * x5;
		x8 = W3 * (x6 + x7);
		x6 = x8 - (W3 - W5) * x6;
		x7 = x8 - (W3 + W5) * x7;

		/* second stage */
		x8 = x0 + x1;
		x0 -= x1;
		x1 = W6 * (x3 + x2);
		x2 = x1 - (W2 + W6) * x2;
		x3 = x1 + (W2 - W6) * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;

		/* third stage */
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = (181 * (x4 + x5) + 128) >> 8;
		x4 = (181 * (x4 - x5) + 128) >> 8;
		
		/* fourth stage */
		DFEVector<DFEVar> result = vectorType_Short.newInstance(this);
		result[0] <== ((x7 + x1) >> 8).cast(type_Short);
		result[1] <== ((x3 + x2) >> 8).cast(type_Short);
		result[2] <== ((x0 + x4) >> 8).cast(type_Short);
		result[3] <== ((x8 + x6) >> 8).cast(type_Short);
		result[4] <== ((x8 - x6) >> 8).cast(type_Short);
		result[5] <== ((x0 - x4) >> 8).cast(type_Short);
		result[6] <== ((x3 - x2) >> 8).cast(type_Short);
		result[7] <== ((x7 - x1) >> 8).cast(type_Short);
		result.simWatch("row_val");
		writeRow(result, row, enable);
		return result;
	}
	
	private DFEVector<DFEVar> idctCol(DFEVar[] values) {
		debug.simPrintf("Running idctCol \n");
		DFEVar x0, x1, x2, x3, x4, x5, x6, x7, x8;
		x1 = (values[4]).cast(type_Int) << 8;
		x2 = (values[6]).cast(type_Int);
		x3 = (values[2]).cast(type_Int);
		x4 = (values[1]).cast(type_Int);
		x5 = (values[7]).cast(type_Int);
		x6 = (values[5]).cast(type_Int);
		x7 = (values[3]).cast(type_Int);
		x0 = ((values[0]).cast(type_Int) << 8) + 8192;

		/* first stage */
		x8 = W7 * (x4 + x5) + 4;
		x4 = (x8 + (W1 - W7) * x4) >> 3;
		x5 = (x8 - (W1 + W7) * x5) >> 3;
		x8 = W3 * (x6 + x7) + 4;
		x6 = (x8 - (W3 - W5) * x6) >> 3;
		x7 = (x8 - (W3 + W5) * x7) >> 3;

		/* second stage */
		x8 = x0 + x1;
		x0 -= x1;
		x1 = W6 * (x3 + x2) + 4;
		x2 = (x1 - (W2 + W6) * x2) >> 3;
		x3 = (x1 + (W2 - W6) * x3) >> 3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;

		/* third stage */
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = (181 * (x4 + x5) + 128) >> 8;
		x4 = (181 * (x4 - x5) + 128) >> 8;

		/* fourth stage */
		DFEVector<DFEVar> result = vectorType_Short.newInstance(this);
		result[0] <== iclp((x7 + x1) >> 14);
		result[1] <== iclp((x3 + x2) >> 14);
		result[2] <== iclp((x0 + x4) >> 14);
		result[3] <== iclp((x8 + x6) >> 14);
		result[4] <== iclp((x8 - x6) >> 14);
		result[5] <== iclp((x0 - x4) >> 14);
		result[6] <== iclp((x3 - x2) >> 14);
		result[7] <== iclp((x7 - x1) >> 14);
		result.simWatch("col_val");
		return result;
	}
	
	private DFEVar iclp(DFEVar value) {
		DFEVar valueLower = value < -256;
		DFEVar valueHigher = value > 255;
		return valueLower ? constant.var(type_Short, -256) : valueHigher ? constant.var(type_Short, 255) : value.cast(type_Short);
	}
	

	private void writeRow(DFEVector<DFEVar> result, DFEVar row, DFEVar enable) {
		for (int i = 0; i < blockDim; i++) {
			mems[i].write(constant.var(0).cast(dfeUInt(1)), result, row.eq(i) & enable);		
		}
	}
	
	private DFEVar[] readCol(DFEVar col) {
		DFEVar[] result = new DFEVar[blockDim];
		for (int i = 0; i < blockDim; i++) {
			result[i] = 
			    col.eq(0) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[0] :
			    col.eq(1) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[1] : 
			    col.eq(2) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[2] :
			    col.eq(3) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[3] :
			    col.eq(4) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[4] :
			    col.eq(5) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[5] :
			    col.eq(6) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[6] :
			    col.eq(7) ? mems[i].read(constant.var(0).cast(dfeUInt(1)))[7] : mems[i].read(constant.var(0).cast(dfeUInt(1)))[0];
		}
		return result;
	}
	
	

}
