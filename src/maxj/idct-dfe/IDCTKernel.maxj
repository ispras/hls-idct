/*
 * Copyright 2021 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations
 * under the License.
 */

package idct;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;

public class IDCTKernel extends Kernel {

	private static final DFEType type_Short = dfeInt(16);
	private static final DFEType type_Int = dfeInt(32);
	
	private static final int W1 = 2841; /* 2048*sqrt(2)*cos(1*pi/16) */
	private static final int W2 = 2676; /* 2048*sqrt(2)*cos(2*pi/16) */
	private static final int W3 = 2408; /* 2048*sqrt(2)*cos(3*pi/16) */
	private static final int W5 = 1609; /* 2048*sqrt(2)*cos(5*pi/16) */
	private static final int W6 = 1108; /* 2048*sqrt(2)*cos(6*pi/16) */
	private static final int W7 = 565;  /* 2048*sqrt(2)*cos(7*pi/16) */
	
	public IDCTKernel(final KernelParameters parameters, final int blockDim) {
		super(parameters);
		debug.simPrintf("Starting DFE\n");
		DFEVectorType<DFEVar> vectorType_Short = new DFEVectorType<DFEVar>(type_Short, blockDim*blockDim);
		DFEVar[] idctValues = new DFEVar[blockDim*blockDim];
		DFEVector<DFEVar> result = vectorType_Short.newInstance(this);
		
		// Input
		final DFEVector<DFEVar> block = io.input("block_in", vectorType_Short);
		
		for (int i = 0; i < blockDim*blockDim; i++)
			idctValues[i] = block[i];
		
		debug.simPrintf("Running idctRow \n");
		for (int i = 0; i < 8; i++)
		    idctRow(idctValues, i);

		debug.simPrintf("Running idctCol \n");
		for (int i = 0; i < 8; i++)
		    idctCol(idctValues, i);

		for (int i = 0; i < blockDim*blockDim; i++)
			result[i] <== idctValues[i];
		
		// Output
		io.output("block_out", result, vectorType_Short);
	}
	
	private void idctRow(DFEVar[] values, final int row) {
		DFEVar x0, x1, x2, x3, x4, x5, x6, x7, x8;

		x1 = (values[4 + 8*row]).cast(type_Int) << 11;
		x2 = (values[6 + 8*row]).cast(type_Int);
		x3 = (values[2 + 8*row]).cast(type_Int);
		x4 = (values[1 + 8*row]).cast(type_Int);
		x5 = (values[7 + 8*row]).cast(type_Int);
		x6 = (values[5 + 8*row]).cast(type_Int);
		x7 = (values[3 + 8*row]).cast(type_Int);
		x0 = ((values[0 + 8*row]).cast(type_Int) << 11) + 128; /* for proper rounding in the fourth stage */

		/* first stage */
		x8 = W7 * (x4 + x5);
		x4 = x8 + (W1 - W7) * x4;
		x5 = x8 - (W1 + W7) * x5;
		x8 = W3 * (x6 + x7);
		x6 = x8 - (W3 - W5) * x6;
		x7 = x8 - (W3 + W5) * x7;

		/* second stage */
		x8 = x0 + x1;
		x0 -= x1;
		x1 = W6 * (x3 + x2);
		x2 = x1 - (W2 + W6) * x2;
		x3 = x1 + (W2 - W6) * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;

		/* third stage */
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = (181 * (x4 + x5) + 128) >> 8;
		x4 = (181 * (x4 - x5) + 128) >> 8;
		
		/* fourth stage */
		values[0 + 8*row] = ((x7 + x1) >> 8).cast(type_Short);
		values[1 + 8*row] = ((x3 + x2) >> 8).cast(type_Short);
		values[2 + 8*row] = ((x0 + x4) >> 8).cast(type_Short);
		values[3 + 8*row] = ((x8 + x6) >> 8).cast(type_Short);
		values[4 + 8*row] = ((x8 - x6) >> 8).cast(type_Short);
		values[5 + 8*row] = ((x0 - x4) >> 8).cast(type_Short);
		values[6 + 8*row] = ((x3 - x2) >> 8).cast(type_Short);
		values[7 + 8*row] = ((x7 - x1) >> 8).cast(type_Short);
	}
	
	private void idctCol(DFEVar[] values, final int col) {
	  DFEVar x0, x1, x2, x3, x4, x5, x6, x7, x8;

	  x1 = (values[8*4 + col]).cast(type_Int) << 8;
	  x2 = (values[8*6 + col]).cast(type_Int);
	  x3 = (values[8*2 + col]).cast(type_Int);
	  x4 = (values[8*1 + col]).cast(type_Int);
	  x5 = (values[8*7 + col]).cast(type_Int);
	  x6 = (values[8*5 + col]).cast(type_Int);
	  x7 = (values[8*3 + col]).cast(type_Int);
	  x0 = ((values[8*0 + col]).cast(type_Int) << 8) + 8192;

	  /* first stage */
	  x8 = W7 * (x4 + x5) + 4;
	  x4 = (x8 + (W1 - W7) * x4) >> 3;
	  x5 = (x8 - (W1 + W7) * x5) >> 3;
	  x8 = W3 * (x6 + x7) + 4;
	  x6 = (x8 - (W3 - W5) * x6) >> 3;
	  x7 = (x8 - (W3 + W5) * x7) >> 3;

	  /* second stage */
	  x8 = x0 + x1;
	  x0 -= x1;
	  x1 = W6 * (x3 + x2) + 4;
	  x2 = (x1 - (W2 + W6) * x2) >> 3;
	  x3 = (x1 + (W2 - W6) * x3) >> 3;
	  x1 = x4 + x6;
	  x4 -= x6;
	  x6 = x5 + x7;
	  x5 -= x7;

	  /* third stage */
	  x7 = x8 + x3;
	  x8 -= x3;
	  x3 = x0 + x2;
	  x0 -= x2;
	  x2 = (181 * (x4 + x5) + 128) >> 8;
	  x4 = (181 * (x4 - x5) + 128) >> 8;

	  /* fourth stage */
	  values[8*0 + col] = iclp((x7 + x1) >> 14);
	  values[8*1 + col] = iclp((x3 + x2) >> 14);
	  values[8*2 + col] = iclp((x0 + x4) >> 14);
	  values[8*3 + col] = iclp((x8 + x6) >> 14);
	  values[8*4 + col] = iclp((x8 - x6) >> 14);
	  values[8*5 + col] = iclp((x0 - x4) >> 14);
	  values[8*6 + col] = iclp((x3 - x2) >> 14);
	  values[8*7 + col] = iclp((x7 - x1) >> 14);
	}
	
	private DFEVar iclp(DFEVar value) {
	  DFEVar valueLower = value < -256;
	  DFEVar valueHigher = value > 255;
	  return valueLower ? constant.var(type_Short, -256) : valueHigher ? constant.var(type_Short, 255) : value.cast(type_Short);
	}

}
